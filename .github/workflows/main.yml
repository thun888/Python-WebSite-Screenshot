name: selenium

# Controls when the action will run. 
on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 6 1,7,13,19,25 * *'  
  # Triggers the workflow on push or pull request events but only for the main branch

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  push:
    branches:
      - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  screenshot:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      # Runs a single command using the runners shell
      - name: 'Set up Python'
        uses: actions/setup-python@v5
        with:
           python-version: 3.x
           
      - name: Install Chinese Support
        run: |
          git pull
          sudo apt-get install language-pack-zh-han*
          sudo apt-get install ttf-mscorefonts-installer
          sudo apt-get install fontconfig
          LANG="zh_CN.UTF-8"
          cp font/HarmonyOS.ttf /usr/share/fonts/
          sudo chmod 644 /usr/share/fonts/HarmonyOS.ttf
          curl -L https://github.com/thun888/Python-WebSite-Screenshot/releases/download/font_asset/apple_fonts.zip -o /usr/share/fonts/apple_fonts.zip
          curl -L https://github.com/thun888/Python-WebSite-Screenshot/releases/download/font_asset/windows_fonts.zip -o /usr/share/fonts/windows_fonts.zip
          # curl -L https://github.com/thun888/Python-WebSite-Screenshot/releases/download/font_asset/apple_fonts_test.zip -o /usr/share/fonts/apple_fonts_test.zip
          unzip /usr/share/fonts/windows_fonts.zip -d /usr/share/fonts/
          rm /usr/share/fonts/windows_fonts.zip
          unzip /usr/share/fonts/apple_fonts.zip -d /usr/share/fonts/
          rm /usr/share/fonts/apple_fonts.zip
          # unzip /usr/share/fonts/apple_fonts_test.zip -d /usr/share/fonts/
          # rm /usr/share/fonts/apple_fonts_test.zip
          # curl -L https://github.com/lxgw/LxgwWenKai-Screen/releases/download/v1.520/LXGWWenKaiScreen.ttf -o /usr/share/fonts/LXGWWenKaiScreen.ttf
          # curl -L https://github.com/lxgw/LxgwWenKai-Screen/releases/download/v1.520/LXGWWenKaiMonoScreen.ttf -o /usr/share/fonts/LXGWWenKaiMonoScreen.ttf
          # curl -L https://github.com/lxgw/LxgwWenKai-Screen/releases/download/v1.520/LXGWWenKaiMonoGBScreen.ttf -o /usr/share/fonts/LXGWWenKaiMonoGBScreen.ttf
          # curl -L https://github.com/lxgw/LxgwWenKai-Screen/releases/download/v1.520/LXGWWenKaiGBScreen.ttf -o /usr/share/fonts/LXGWWenKaiGBScreen.ttf
          # sudo chmod 644 /usr/share/fonts/LXGWWenKaiScreen.ttf
          # sudo chmod 644 /usr/share/fonts/LXGWWenKaiMonoScreen.ttf
          # sudo chmod 644 /usr/share/fonts/LXGWWenKaiMonoGBScreen.ttf
          # sudo chmod 644 /usr/share/fonts/LXGWWenKaiGBScreen.ttf
          sudo mkfontscale
          sudo mkfontdir
          sudo fc-cache -fv

      - name: Install ChromeDriver
        run: |
          CHROME_VERSION=$(google-chrome --version | awk '{print $3}') \
            && echo "CHROME_VERSION: $CHROME_VERSION" \
            && curl --silent --show-error --location --fail --retry 3 --output /tmp/chromedriver_linux64.zip "https://storage.googleapis.com/chrome-for-testing-public/${CHROME_VERSION}/linux64/chromedriver-linux64.zip" \
            && cd /tmp \
            && unzip chromedriver_linux64.zip \
            && rm -rf chromedriver_linux64.zip \
            && sudo mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver \
            && sudo chmod +x /usr/local/bin/chromedriver \
            && chromedriver --version
      
      - name: 'Install requirements'
        run: pip install -r ./requirements.txt

      - name: 'Write hosts'
        run: sudo python ./writehost.py

      - name: 'Get screenshot'
        run: python  -u main.py

      # - name: 'DELETE DAYDEL FILES'
        # run: python ./del.py

      # - name: 'RELOAD DAYDEL FILES'
        # run: python ./reload.py
      - name: 'Artifacts'
        uses: actions/upload-artifact@v4
        with:
          name: save
          path: save

      - name: Commit and push to page branch
        run: |
          cp -r ./page/* save/
          cd save
          git init
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b page
          git add .
          git commit -m "GitHub Actions Crawler ALL IN ONE at $(date +'%Y-%m-%d %H:%M:%S')"
          git push --force https://x-access-token:${{ secrets.GIT_TOKEN }}@github.com/${{ github.repository }}.git page
          
      - name: Delete Workflow Runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 30
          keep_minimum_runs: 6

  keepalive-workflow:
    name: Keepalive Workflow
    if: ${{ always() }}
    needs: screenshot
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - uses: liskin/gh-workflow-keepalive@v1